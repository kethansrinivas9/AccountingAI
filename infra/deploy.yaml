AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy Next.js (React) & FastAPI on EC2 Free Tier using CloudFormation"

Resources:
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: ec2_rsa_key
      ImageId: ami-04b4f1a9cf54c11d0
      IamInstanceProfile: "ec2-s3-access" # Using the instance profile name of IAM role that was already created
      SecurityGroups:
        - Ref: MySecurityGroup
      Tags:
        - Key: Name
          Value: React-FastAPI-EC2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Enable logging
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

          echo "Starting UserData setup process..."

          # Update and install dependencies
          apt-get update && apt-get upgrade -y
          apt-get install -y python3 python3-pip python3.12-venv nginx git

          # Install Node.js & PM2
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          apt-get install -y nodejs
          npm install -g pm2 serve

          # Clone repository
          echo "Cloning repository..."
          git clone https://github.com/kethansrinivas9/AccountingAI.git /home/ubuntu/AccountingAI

          # Configure backend
          echo "Setting up backend..."
          cd /home/ubuntu/AccountingAI/backend
          python3 -m venv myenv
          ./myenv/bin/pip3 install -r requirements.txt


          # Configure frontend
          cd /home/ubuntu/AccountingAI/frontend
          npm install
          echo "Building frontend..."
          npm run build

          # Fix ownership
          chown -R ubuntu:ubuntu /home/ubuntu/AccountingAI

          # Configure Nginx
          cat <<EOF | sudo tee /etc/nginx/sites-available/default
          server {
              listen 80;

              # Redirect root to /home
              location = / {
                  return 301 /home;
              }

              # Handle Next.js static files
              location /_next/ {
                  proxy_pass http://localhost:3000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              }

              # Route /home to localhost:3000
              location /home {
                  proxy_pass http://localhost:3000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              }

              # Route /documents/upload to localhost:3000
              location /documents/upload {
                  proxy_pass http://localhost:3000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              }

              # Route /api/ to localhost:8000
              location /api/ {
                  proxy_pass http://localhost:8000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              }
          }
          EOF

          # Start services
          echo "Starting services..."
          systemctl restart nginx

          # Start applications with PM2
          cd /home/ubuntu/AccountingAI
          sudo -u ubuntu bash -c "export PYTHONPATH=/home/ubuntu/AccountingAI/backend && \
            cd /home/ubuntu/AccountingAI && \
            pm2 start \"/home/ubuntu/AccountingAI/backend/myenv/bin/uvicorn main:app --host 0.0.0.0 --port 8000\" --name fastapi-app-2 && \
            cd /home/ubuntu/AccountingAI/frontend && \
            pm2 start \"serve out -l 3000\" --name react-app && \
            sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u ubuntu --hp /home/ubuntu && \
            pm2 save"
            
          echo "Setup complete!"

  MyEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: eipalloc-069eb618a361393a5 # Your existing Elastic IP allocation ID or the public IP
      InstanceId: !Ref MyEC2Instance

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH, HTTP, and API Access"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 18.206.107.0/24 # Allow SSH
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # Allow HTTP
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0 # Allow Next.js
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0 # Allow FastAPI
